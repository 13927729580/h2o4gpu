"""
:copyright: 2017-2018 H2O.ai, Inc.
:license:   Apache License Version 2.0 (see LICENSE for details)
"""
__all__ = ["__version__", "__build_info__"]
import os
import subprocess
import sys

# Build defaults
build_info = {
    'suffix':        '+local',
    'build':         'dev',
    'commit':        '',
    'describe':      '',
    'build_os':      '',
    'build_machine': '',
    'build_date':    '',
    'build_user':    '',
    'base_version':  '0.0.0'
}

# path = pkg_resources.resource_filename("h2o4gpu", "BUILD_INFO.txt")
build_info_txt = os.path.join('h2o4gpu', 'BUILD_INFO.txt')


def read_version_from_config():
    cur_dir = os.path.abspath(os.path.curdir)
    version_mk_path = os.path.normpath(os.path.join(cur_dir,
                                                    '../../make/version.mk'))
    with open(version_mk_path, 'r') as fd:
        version_mk = fd.read().split('\n')

    # in version.mk: BASE_VERSION = x.x.x.xxxx
    for line in version_mk:
        line = line.strip().split(' ')
        if line[0] == ('BASE_VERSION'):
            version = line[-1]
            return version


def read_suffix_from_git():
    try:
        suffix = subprocess.check_output(
            ['git', 'describe', '--always', '--dirty'])
        suffix = '+local_' + suffix.decode('utf-8')
    except FileNotFoundError:
        print('git command not found.', file=sys.stderr)
        suffix = build_info['suffix']
    return suffix


# Build info is generated by makefile in top-level dir, which is not used if
# one calls setup.py directly
if os.path.exists(build_info_txt):
    with open(build_info_txt) as f:
        exec(f.read(), build_info)

# Exported properties to make them available in __init__.py
__version__ = "{}{}".format(read_version_from_config(), read_suffix_from_git())
__build_info__ = build_info
