#!/usr/bin/groovy
// TOOD: rename to @Library('h2o-jenkins-pipeline-lib') _
@Library('test-shared-library') _

import ai.h2o.ci.Utils

def utilsLib = new Utils()
CI_VERSION_SUFFIX = utilsLib.getCiVersionSuffix()
SAFE_CHANGE_ID = changeId()
CONTAINER_NAME = "h2o4gpu-build-${SAFE_CHANGE_ID}-${env.BUILD_ID}"

String changeId() {
    if (env.CHANGE_ID) {
        return "-${env.CHANGE_ID}".toString()
    }
    return "-master"
}

// Just Notes:
//def jobnums       = [0 , 1 , 2  , 3]
//def tags          = ["nccl" , "nonccl" , "nccl"  , "nonccl"]
//def cudatags      = ["cuda8", "cuda8"  , "cuda9" , "cuda9"]
//def dobuilds      = [1, 0, 0, 0]
//def dofulltests   = [1, 0, 0, 0]
//def dopytests     = [1, 0, 0, 0]
//def doruntimes    = [1, 1, 1, 1]
//def dockerimagesbuild    = ["nvidia/cuda:8.0-cudnn5-devel-ubuntu16.04", "nvidia/cuda:8.0-cudnn5-devel-ubuntu16.04", "nvidia/cuda:9.0-cudnn7-devel-ubuntu16.04", "nvidia/cuda:9.0-cudnn7-devel-ubuntu16.04"]
//def dockerimagesruntime  = ["nvidia/cuda:8.0-cudnn5-runtime-ubuntu16.04", "nvidia/cuda:8.0-cudnn5-runtime-ubuntu16.04", "nvidia/cuda:9.0-cudnn7-runtime-ubuntu16.04", "nvidia/cuda:9.0-cudnn7-runtime-ubuntu16.04"]
//def dists         = ["dist","dist2","dist3","dist4"]


pipeline {
    agent none

    // Setup job options
    options {
        ansiColor('xterm')
        timestamps()
        timeout(time: 120, unit: 'MINUTES')
        buildDiscarder(logRotator(numToKeepStr: '10'))
        disableConcurrentBuilds()
        skipDefaultCheckout()
    }

    environment {
        MAKE_OPTS = "-s CI=1" // -s: silent mode
    }

    stages {

        /////////////////////////////////////////////////////////////////////
        //
        // -nonccl-cuda9
        //
        //  Avoid mr-dl8 and mr-dl10 for build for now due to permission denied issue
        /////////////////////////////////////////////////////////////////////
        stage("Build Wheel on Linux -nonccl-cuda9") {

            agent {
                label "nvidia-docker && (mr-dl11 || mr-dl16)"
            }

            steps {
                def utils = load "Jenkinsfile.utils"
                dumpInfo 'Linux Build Info'
                // Do checkout
                retryWithTimeout(100 /* seconds */, 3 /* retries */) {
                    deleteDir()
                    checkout([
                            $class                           : 'GitSCM',
                            branches                         : scm.branches,
                            doGenerateSubmoduleConfigurations: false,
                            extensions                       : scm.extensions + [[$class: 'SubmoduleOption', disableSubmodules: true, recursiveSubmodules: false, reference: '', trackingSubmodules: false, shallow: true]],
                            submoduleCfg                     : [],
                            userRemoteConfigs                : scm.userRemoteConfigs])
                }

                script {
                    utils.buildOnLinux("nvidia/cuda:9.0-cudnn7-devel-ubuntu16.04", "-nonccl-cuda9", "dist3", 'linux_whl4')
                }
            }
        }

        stage("Fast Test Wheel & Pylint & S3up on Linux -nonccl-cuda9") {
            agent {
                label "gpu && nvidia-docker && (mr-dl11 || mr-dl16)"
            }
            steps {
                def utils = load "Jenkinsfile.utils"
                dumpInfo 'Linux Test Info'
                // Get source code (should put tests into wheel, then wouldn't have to checkout)
                retryWithTimeout(100 /* seconds */, 3 /* retries */) {
                    checkout scm
                }
                script {
                    unstash 'version_info'
                    unstash 'linux_whl4'
                    utils.runTests("nvidia/cuda:9.0-cudnn7-devel-ubuntu16.04", "-nonccl-cuda9", "dist3", "dotestfast_nonccl")
                }
                retryWithTimeout(200 /* seconds */, 5 /* retries */) {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: "awsArtifactsUploader"]]) {
                        script {
                            utils.publishToS3("-nonccl-cuda9" , "dist3")
                        }
                    }
                }
            }
        }

        stage("Build/Publish Runtime Docker -nonccl-cuda9") {
            agent {
                label "nvidia-docker"
            }
            steps {
                def utils = load "Jenkinsfile.utils"
                dumpInfo 'Linux Build Info'
                // Do checkout
                retryWithTimeout(100 /* seconds */, 3 /* retries */) {
                    deleteDir()
                    checkout([
                            $class                           : 'GitSCM',
                            branches                         : scm.branches,
                            doGenerateSubmoduleConfigurations: false,
                            extensions                       : scm.extensions + [[$class: 'SubmoduleOption', disableSubmodules: true, recursiveSubmodules: false, reference: '', trackingSubmodules: false, shallow: true]],
                            submoduleCfg                     : [],
                            userRemoteConfigs                : scm.userRemoteConfigs])
                }
                script {
                    sh """
                        mkdir -p build ; rm -rf build/VERSION.txt
                    """
                }
                unstash 'linux_whl4'
                unstash 'version_info'
                script {
                    sh 'echo "Stashed version file:" && ls -l build/'
                }
                script {
                    utils.buildRuntime("nvidia/cuda:9.0-cudnn7-runtime-ubuntu16.04", "-nonccl-cuda9")
                }
                retryWithTimeout(200 /* seconds */, 5 /* retries */) {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: "awsArtifactsUploader"]]) {
                    script {
                        utils.publishRuntimeToS3("-nonccl-cuda9")
                    }
                }
                }
            }
        }
    } // end over stages
    post {
        failure {
            node('mr-dl11') {
                script {
                    // Hack - the email plugin finds 0 recipients for the first commit of each new PR build...
                    def email = utilsLib.getCommandOutput("git --no-pager show -s --format='%ae'")
                    emailext(
                            to: "mateusz@h2o.ai, ${email}",
                            subject: "BUILD FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                            body: '''${JELLY_SCRIPT, template="html_gmail"}''',
                            attachLog: true,
                            compressLog: true,
                            recipientProviders: [
                                    [$class: 'DevelopersRecipientProvider'],
                            ]
                    )
                }
            }
        }
    }
}
