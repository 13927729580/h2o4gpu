#!/usr/bin/env groovy
@Library('test-shared-library') _

import ai.h2o.ci.Utils
import ai.h2o.ci.BuildInfo

def utilsLib = new Utils()
CI_VERSION_SUFFIX = utilsLib.getCiVersionSuffix()
SAFE_CHANGE_ID = changeId()
CONTAINER_NAME = "h2o4gpu-build-${SAFE_CHANGE_ID}-${env.BUILD_ID}-${env.BUILD_TYPE}"

String changeId() {
    if (env.CHANGE_ID) {
        return "-${env.CHANGE_ID}".toString()
    }
    return "-master"
}

void publishToS3(BuildInfo buildInfo, String extratag, String dist) {
    echo "Publishing artifact to S3"

    def versionTag = buildInfo.getVersion()
    def majorVersionTag = buildInfo.getMajorVersion()
    def artifactId = "h2o4gpu"
    def artifact = "${artifactId}-${versionTag}-py36-none-any.whl"
    def localArtifact = "src/interface_py/${dist}/${artifact}"

    sh 'echo "S3 defs: $versionTag $artifactId $artifact $localArtifact" '

    // always upload for testing
    def bucket = "s3://artifacts.h2o.ai/snapshots/ai/h2o/${artifactId}/${majorVersionTag}${extratag}/"
    sh "s3cmd put ${localArtifact} ${bucket}"
    sh "s3cmd setacl --acl-public  ${bucket}${artifact}"

    if (isRelease()) {
        bucket = "s3://artifacts.h2o.ai/releases/stable/ai/h2o/${artifactId}/${majorVersionTag}${extratag}/"
        sh "s3cmd put ${localArtifact} ${bucket}"
        sh "s3cmd setacl --acl-public  ${bucket}${artifact}"
    }
    if (isBleedingEdge()) {
        bucket = "s3://artifacts.h2o.ai/releases/bleeding-edge/ai/h2o/${artifactId}/${majorVersionTag}${extratag}/"

        def bleedingEdgeArtifact = "${artifactId}-${versionTag.split('\\+')?????????????????????????[0]?}-py36-none-any.whl"
        sh "s3cmd put ${localArtifact} ${bucket}${bleedingEdgeArtifact}"
        sh "s3cmd setacl --acl-public  ${bucket}${bleedingEdgeArtifact}"
    }
}

void publishRuntimeToS3(BuildInfo buildInfo,String extratag) {
    echo "Publishing runtime to S3"

    def versionTag = buildInfo.getVersion()
    def majorVersionTag = buildInfo.getMajorVersion()
    def artifactId = "h2o4gpu"
    def artifact = "${artifactId}-${versionTag}${extratag}-runtime.tar.gz"
    def localArtifact = "${artifact}"

    sh 'echo "S3runtime defs: $versionTag $artifactId $artifact $localArtifact" '

    // always upload for testing
    def bucket = "s3://artifacts.h2o.ai/snapshots/bleeding-edge/ai/h2o/${artifactId}/${majorVersionTag}${extratag}/"
    sh "s3cmd put ${localArtifact} ${bucket}"
    sh "s3cmd setacl --acl-public  ${bucket}${artifact}"

    if (isRelease()) {
        bucket = "s3://artifacts.h2o.ai/releases/stable/ai/h2o/${artifactId}/${majorVersionTag}${extratag}/"
        sh "s3cmd put ${localArtifact} ${bucket}"
        sh "s3cmd setacl --acl-public  ${bucket}${artifact}"
    }
    if (isBleedingEdge()) {
        bucket = "s3://artifacts.h2o.ai/releases/bleeding-edge/ai/h2o/${artifactId}/${majorVersionTag}${extratag}/"

        def bleedingEdgeArtifact = "${artifactId}-${versionTag.split('\\+')?????????????????????????[0]?}-runtime.tar.gz"
        sh "s3cmd put ${localArtifact} ${bucket}${bleedingEdgeArtifact}"
        sh "s3cmd setacl --acl-public  ${bucket}${bleedingEdgeArtifact}"
    }
}

void runTests(BuildInfo buildInfo, String dockerimage, String extratag, String dist, String target) {
    echo "Running tests"

   try {
        sh """
            CONTAINER_NAME=${CONTAINER_NAME} extratag=${extratag} dockerimage=${dockerimage} target=${target} dist=${dist} ./scripts/make-docker-runtests.sh
           """
    } catch (error) {
            throw error
    } finally {
        sh "nvidia-docker stop ${CONTAINER_NAME} || true"
        // if snapshot and using buildID or hash in docker image, need to rm that container and image here.
        arch 'tmp/*.log'
        junit testResults: 'build/test-reports/*.xml', keepLongStdio: true, allowEmptyResults: false
    }
}

void buildOnLinux(String dockerimage, String extratag, String dist, String stashName) {
    echo "Building on linux"

    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: "awsArtifactsUploader"]]) {
        try {
            sh """
                CONTAINER_NAME=${CONTAINER_NAME} extratag=${extratag} dockerimage=${dockerimage} H2O4GPU_BUILD=${env.BUILD_ID} H2O4GPU_SUFFIX=${isRelease() ? "" : "+" + CI_VERSION_SUFFIX} makeopts=${env.MAKE_OPTS} dist=${dist} ./scripts/make-docker-devel.sh
               """
            stash includes: "src/interface_py/${dist}/*h2o4gpu-*.whl", name: stashName
            stash includes: 'build/VERSION.txt', name: 'version_info'
            sh "echo \"Archive artifacts\""
            arch "src/interface_py/${dist}/*h2o4gpu-*.whl"
        }  catch (error) {
            throw error
        } finally {
            sh "nvidia-docker stop ${CONTAINER_NAME} || true"
            // if snapshot and using buildID or hash in docker image, need to rm that container and image here.
        }
    }
}

void buildRuntime(BuildInfo buildInfo, String dockerimage, String extratag) {
    echo "Building runtime"

    def buckettype = "snapshots"
    def fullVersionTag = buildInfo.getVersion()
    def encodedFullVersionTag = fullVersionTag.replace("+", "%2B")
    def versionTag = fullVersionTag.tokenize('+')[0]

    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: "awsArtifactsUploader"]]) {
        try {
            sh """
                CONTAINER_NAME=${CONTAINER_NAME} versionTag=${versionTag} extratag=${extratag} encodedFullVersionTag=${encodedFullVersionTag} fullVersionTag=${fullVersionTag} buckettype=${buckettype} dockerimage=${dockerimage} ./scripts/make-docker-runtime.sh
               """
        } catch (error) {
            throw error
        } finally {
            sh "nvidia-docker stop ${CONTAINER_NAME} || true"
            // if snapshot and using buildID or hash in docker image, need to rm that container and image here.
        }
    }
}

def isRelease() {
    return env.BRANCH_NAME.startsWith("rel")
}

def isBleedingEdge() {
    return env.BRANCH_NAME.startsWith("master")
}


return this
